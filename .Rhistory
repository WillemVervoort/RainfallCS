1.84*51.50
cum.pet <- function(x){
dat <- vector()
avg <- mean(x)
x1 <- x-avg
dat <- cumsum(x1)
return(dat)
}
# rain as lognormal?
cum.rain <- function(x, log=T){
dat <- vector()
avg <- mean(x)
x1 <- x-avg
dat <- cumsum(x1)
return(dat)
}
PET <-read.csv("x:/vervoort/research/regmip/20140325_Pet_watch.csv")
Annual_Rain <- read.csv("x:/vervoort/research/regmip/20140325_BOM_MDBAnnualRain.csv",
header =F)
colnames(Annual_Rain) <- c("yr_start", "mo_start", "yr_end", "mo_end", "Rain")
Annual_Rain$anom <- Annual_Rain$Rain-mean(Annual_Rain$Rain)
Rain <- read.csv("x:/vervoort/research/regmip/20140325_rain_watch.csv")
head(Rain)
par(mfrow=c(2,1))
hist(PET$PET) # fairly normal
hist(log(Rain$avg)) # lognormal
par(mfrow=c(1,1))
# OK, PET are the daily values, while the Rainfall are the monthly totals
PET$PET_mean<- cum.pet(PET$PET) # cumulative PET deviation from mean
plot(as.Date(PET$Date),PET$PET_mean, type = "l",xlab="Date",
ylab="Cumulative PET deviation from mean PET[mm]",
ylim=c(-1700,1000))
#lines(as.Date(paste(Annual_Rain$yr_start,Annual_Rain$mo_start,"01",sep="-")),
#      cum.rain(Annual_Rain$Rain),col="red")
lines(as.Date(Rain$Time,"%m/%d/%Y"),cum.rain(Rain$avg),col="red")
legend("topleft",c("cumulative ET anomaly", "cumulative Rain anomaly"),
lty=1,col=c("black","red"))
# Can we now do some sort of water balance (P-ET)
# would first need to aggregate PET
avgPET <- aggregate(PET$PET,list(Year=format(as.Date(PET$Date),"%Y"),
Month=format(as.Date(PET$Date),"%m")),
sum)
head(avgPET)
test <- Rain$avg-avgPET$x
plot(as.Date(Rain$Time, "%m/%d/%Y"), cum.pet(test))
par(mfrow=c(2,1))
hist(PET$PET) # fairly normal
hist(log(Rain$avg)) # lognormal
par(mfrow=c(1,1))
par(mfrow=c(2,1))
hist(PET$PET) # fairly normal
hist(Rain$avg) # lognormal
par(mfrow=c(1,1))
hist(log(Rain$avg+1)) # lognormal
hist(avgPET$x)
sd(avgPET$x)
SDPET <- sd(avgPET$x)
Armid <- read.csv("x:/vervoort/fstc/data/DC02D_Data_056002_11437721761417.txt")
head(Armid)
plot(as.Date(Armid[,3],"%d/%m/%Y"),cum.pet(Armid[,4])
)
avg <- mean(x,na.rm=T)
cum.rain <- function(x, log=T){
dat <- vector()
avg <- mean(x,na.rm=T)
x1 <- x-avg
dat <- cumsum(x1)
return(dat)
}
cum.pet <- function(x){
dat <- vector()
avg <- mean(x,na.rm=T)
x1 <- x-avg
dat <- cumsum(x1)
return(dat)
}
plot(as.Date(Armid[,3],"%d/%m/%Y"),cum.pet(Armid[,4]))
head(Armid)
Armid[,3]
plot(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),cum.pet(Armid[,4]))
as.character(Armid[,3])
as.Date(as.character(Armid[,3]),"%d/%m/%Y")
cum.pet(Armid[,4])
?cumsum
plot(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),Armid[,4])
x <- Armid[,4]
ok <- is.na(x)==T
ok <- x[is.na(x)==T]
bad <- is.na(x)[,1]
cum.rain <- function(x, log=T){
dat <- vector()
avg <- mean(x,na.rm=T)
dat[1] <- x[1]-avg
bad <- is.na(x)
x[bad] <- 0
for (i in 2:length(x)) {
dat[i] <- dat[i-1] + (x[i]-avg)
}
dat[bad] <- NA
return(dat)
}
plot(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),cum.rain(Armid[,4]))
plot(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),cum.rain(Armid[,4]), type="l")
cum.rain <- function(x, log=T){
dat <- vector()
avg <- mean(x,na.rm=T)
dat[1] <- x[1]-avg
bad <- is.na(x)
x[bad] <- avg
for (i in 2:length(x)) {
dat[i] <- dat[i-1] + (x[i]-avg)
}
dat[bad] <- NA
return(dat)
}
plot(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),cum.rain(Armid[,4]), type="l")
head(Armid)
lines(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),cum.rain(0.15*Armid[,6]),col="red")
cum.rain(0.15*Armid[,6])
head(Armid[,6])
lines(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),cum.rain(0.15*Armid[,7]),col="red")
head(Armid[,67])
head(Armid[,7])
head(Armid[,8])
head(Armid)
lines(as.Date(as.character(Armid[,3]),"%d/%m/%Y"),cum.rain(0.15*Armid[,8]),col="red")
cum.rain(0.15*Armid[,8])
names(Armid)
plot(Armid[,8])
Armid <- read.csv("x:/vervoort/fstc/data/DC02D_Data_074128_11437721761417.txt")
names(Armid)
plot(Armid[,8])
Denil <- read.csv("x:/vervoort/fstc/data/DC02D_Data_074128_11437721761417.txt")
names(Denil)
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"),cum.rain(Denil[,4]), type="l")
lines(as.Date(as.character(Denil[,3]),"%d/%m/%Y"),cum.rain(0.15*Denil[,8]),col="red")
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"),cum.rain(Denil[,4]), type="l", ylim=c(-500,2000))
lines(as.Date(as.character(Denil[,3]),"%d/%m/%Y"),cum.rain(0.15*Denil[,8]),col="red")
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"),cum.rain(Denil[,4]), type="l", ylim=c(-500,2000))
lines(as.Date(as.character(Denil[,3]),"%d/%m/%Y"),cum.rain(0.1*Denil[,8]),col="red")
test <- Denil[,4]-0.1*Denil[,8]
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"), cum.pet(test))
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"), cum.rain(test))
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"), cum.rain(test), type="l")
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"), cum.rain(test), type="l",
xlab="Date", ylab="daily 'water balance' P - 0.1*maxT")
MonRain <- aggregate(Denil[,4],list(Year=substr(Denil[,3],7,10),
Month=substr(Denil[,3],4,5)),sum)
MonPET <- aggregate(0.1*Denil[,8],list(Year=substr(Denil[,3],7,10),
Month=substr(Denil[,3],4,5)),sum)
plot(as.Date(as.character(Denil[,3]),"%d/%m/%Y"), cum.rain(test), type="l",
xlab="Date", ylab="daily 'water balance' P - 0.1*maxT")
head(MonRain)
test2 <- MonRain$x - MonPET$x
plot(as.Date(paste(MonRain[,1],MonRain[,2],"01",sep="-")), cum.rain(test2), type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
test2
as.Date(paste(MonRain[,1],MonRain[,2],"01",sep="-"))
cum.rain(test2)
MonPET$x
MonRain$x
MonRain$x - MonPET$x
mean(test2,na.rm)
mean(test2,na.rm=T)
test2 - mean(test2,na.rm=T)
plot(as.Date(paste(MonRain[,1],MonRain[,2],"01",sep="-")), cum.rain(test2), type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
x <- test2
avg <- mean(x,na.rm=T)
avg
dat[1] <- x[1]-avg
dat <- vector()
avg <- mean(x,na.rm=T)
dat[1] <- x[1]-avg
dat[1]
bad <- is.na(x)
x[bad] <- avg
for (i in 2:length(x)) {
dat[i] <- dat[i-1] + (x[i]-avg)
}
plot(dat)
dat[bad] <- NA
plot(dat)
plot(as.Date(paste(MonRain[,1],MonRain[,2],"01",sep="-")), dat, type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
as.Date(paste(MonRain[,1],MonRain[,2],"01",sep="-"))
head(MonRain)
MonRain <- aggregate(Denil[,4],list(Month=substr(Denil[,3],4,5)),
Year=substr(Denil[,3],7,10),sum)
MonPET <- aggregate(0.1*Denil[,8],list(Month=substr(Denil[,3],4,5)),
Year=substr(Denil[,3],7,10),sum)
test2 <- MonRain$x - MonPET$x
MonRain <- aggregate(Denil[,4],list(Month=substr(Denil[,3],4,5),
Year=substr(Denil[,3],7,10)),sum)
MonPET <- aggregate(0.1*Denil[,8],list(Month=substr(Denil[,3],4,5),
Year=substr(Denil[,3],7,10)),sum)
test2 <- MonRain$x - MonPET$x
plot(as.Date(paste(MonRain[,1],MonRain[,2],"01",sep="-")), cum.rain(test2), type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
plot(as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-")), cum.rain(test2), type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
MonRain[,1]
as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-"))
cum.rain(test2)
cum.rain <- function(x, log=T){
dat <- vector()
avg <- mean(x,na.rm=T)
dat[1] <- x[1]-avg
bad <- is.na(x)
x[bad] <- avg
for (i in 2:length(x)) {
dat[i] <- dat[i-1] + (x[i]-avg)
}
dat[bad] <- NA
return(dat)
}
test2 <- MonRain$x - MonPET$x
test2
plot(as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-")), cum.rain(test2), type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
plot(as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-")), dat, type="l",
xlab="Date", ylab="monthly 'water balance' P - 0.1*maxT")
xx <- faithful$eruptions
fit <- density(xx)
plot(fit)
?rev
xx <- faithful$eruptions
fit1 <- density(xx)
fit2 <- replicate(10000, {
x <- sample(xx,replace=T);
density(x,from=min(fit1$x), to=max(fit1$x))$y
})
fit3 <- apply(fit2,1,quantile,c(0.025,0.975))
head(fit1)
str(fit1)
str(fit3)
head(fit3)
plot(fit1,ylim=range(fit))
polygon(c(fit1$x,rev(fit1$x)),
c(fit3[1,],rev(fit3[2,])),
col='grey',border=F)
lines(fit1)
plot(fit1,ylim=range(fit3))
polygon(c(fit1$x,rev(fit1$x)),
c(fit3[1,],rev(fit3[2,])),
col='grey',border=F)
lines(fit)
install.packages("Rcpp")
setInternet2(TRUE)
install.packages("Rcpp")
install.packages("inline")
install.packages("Rcpp")
install.packages(compiler)
install.packages("compiler")
require(compiler)
require(compiler)
?cmpfun
library(rbenchmark)
install.packages("rbenchmark")
library(rbenchmark)
N <- 35     ## same parameter as original post
res <- benchmark(fibR(N),
fibRC(N),
fibRcpp(N),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative",
replications=1)
print(res)  ## show result
require(compiler)
## A C++ version compile with cppFunction
fibRcpp <- cppFunction( '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}
' )
## for comparison, the original (but repaired with 0/1 offsets)
fibR <- function(seq) {
if (seq == 0) return(0);
if (seq == 1) return(1);
return (fibR(seq - 1) + fibR(seq - 2));
}
## also use byte-compiled R function
fibRC <- cmpfun(fibR)
## load rbenchmark to compare
library(rbenchmark)
N <- 35     ## same parameter as original post
res <- benchmark(fibR(N),
fibRC(N),
fibRcpp(N),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative",
replications=1)
print(res)  ## show result
require(inline)
fibRcpp <- cppFunction( '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}
' )
?cppFunction
?cppfunction
??cppFunction
require(Rcpp)
fibRcpp <- cppFunction( '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}
' )
N <- 35     ## same parameter as original post
res <- benchmark(fibR(N),
fibRC(N),
fibRcpp(N),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative",
replications=1)
print(res)  ## show result
install.packages("shiny")
?getSymbols
??getSymbols
?switch
shiny::runApp('GitHub/RainfallCS/RainfallCS')
temp <- tempfile()
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep=""),"r"))
unlink(temp)
input <- list()
input$Station <- "Harden"
setwd("C:\\Users\\rver4657\\Documents\\Github\\RainfallCS")
load("stations.Rdata")
setwd("C:\\Users\\rver4657\\Documents\\Github\\RainfallCS\\RainfallCS")
load("stations.Rdata")
SelectStation <- stations[grep(input$Station,
stations$Site_name,ignore.case=T),"Site"]
# temporary, just use the first one, later work out how to deal with this
SelectStation <- SelectStation[1]
SelectStation
temp <- tempfile()
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep=""),"r"))
unlink(temp)
?unz
unz("temp", paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep=""),"r")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
temp
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
?tempfile()
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
?bunzip2
require(Rutils)
install.packages("Rutils")
require(Rutils)
??bunzip
raindata <- read.table(unzip(temp, files=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""),"r"))
unlink(temp)
temp <- tempfile(tmpdir=getwd())
temp
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
temp
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""),"r")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
?download.file
temp
close(temp)
unlink(temp)
unlink(temp)
unlink(temp)
unlink(temp)
url(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
mode="wb")
url(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
)
?tempfile
temp <- tempfile(pattern="tempfile",tmpdir=getwd(),fileext="zip")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
temp <- tempfile(pattern="tempfile",tmpdir=getwd(),fileext=".zip")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
raindata <- read.csv(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
raindata <- read.csv(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
con <- unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
raindata <- read.csv(con)
con <- unzip(temp)
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
con <- unzip(temp)
?unzip
?download.file
temp <- paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep="")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
unzip(temp)
temp
getwd()
?reactiveValues
??reactiveValues
shiny::runApp()
shiny::runApp()
load("stations.Rdata")
head(stations)
input$Station <- "Harden"
input <- list()
input$Station <- "Harden"
input$state <- "NSW"
name <- list()
name$name <- stations[grep(input$Station,stations$Site_name,
ignore.case=T),c("Site","STA")]
name$name2 <- name$name[grep(input$state),name$name[,2],]
name$name
name$name2 <- name$name[grep(input$state),name$name$STA,]
name$name$STA
name$name2 <- name$name[grep(input$state),as.character(name$name$STA),]
name$name2 <- name$name[grep(input$state),as.character(name$name$STA)]
ncol(name$name)
name$name2 <- name$name[grep(input$state,name$name$STA,]
name$name2 <- name$name[grep(input$state,name$name$STA),]
name$name2
head(stations)
name$name <- stations[grep(input$Station,stations$Site_name,
ignore.case=T),c("Site","Site_name","STA")]
name$name2 <- name$name[grep(input$state,name$name$STA),]
name$name2
shiny::runApp()
?bootStrapPage
?bootstrapPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
install.packages("RODBC")
shiny::runApp()
