hist(dat)
hist(as.numeric(dat))
hist(dat$slope)
shiny::runApp()
odbcClose(db)
odbcClose(db)
shiny::runApp()
head(data)
shiny::runApp()
?ggplot2
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
df_regr_results <- sqlQuery(db, "select * from regr_results")
df_regr_results
dat <- sqlQuery(db,paste("select slope, p-slope from regr_results"))
dat
dat <- sqlQuery(db,paste("SELECT slope, p-slope FROM regr_results"))
dat
dat <- sqlQuery(db,paste("SELECT slope, p_slope FROM regr_results"))
dat
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
names(df_main)
types <- sqlQuery(db, "select datatype from main_table")
types <- [(nrow(types)-nrow(dat)):nrow(types)]
types <- types[(nrow(types)-nrow(dat)):nrow(types)]
nrow(types)
length(types)
types
types <- sqlQuery(db, "select data_type from main_table")
types <- types[(nrow(types)-nrow(dat)):nrow(types)]
names(types)
types
types <- types[(nrow(types)-nrow(dat)):nrow(types),"datatype"]
df.all <- cbind(dat,types)
dat <- sqlQuery(db,paste("SELECT slope, p_slope FROM regr_results"))
types <- sqlQuery(db, "select data_type from main_table")
types <- types[(nrow(types)-nrow(dat)):nrow(types),"datatype"]
df.all <- cbind(dat,types)
dat
types
nrow(types)
types <- types[(nrow(types)-nrow(dat)):nrow(types),"data_type"]
types <- sqlQuery(db, "select data_type from main_table")
types <- types[(nrow(types)-nrow(dat)):nrow(types),"data_type"]
types
df.all <- cbind(dat,types)
types <- sqlQuery(db, "select data_type from main_table")
nrow(types)
nrow(dat)
types <- types[(nrow(types)-nrow(dat)+1):nrow(types),"data_type"]
length(types)
df.all <- cbind(dat,types)
df.all
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sqlClear
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
#
# # # testing ODBC
# # # find the names of the available tables
# # sqlTables(db)
# #
# Clear the different tables
sqlClear(db,"main_table")
sqlClear(db,"regr_results")
sqlClear(db,"regr_stats")
odbcClose(db)
shiny::runApp()
?try
shiny::runApp()
shiny::runApp()
shiny::runApp()
test <- bomDailyObs(73012,"max_temp")
test
source("dataripper.r")
test <- bomDailyObs(73012,"max_temp")
test
?exists
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sqlDrop(db,"main_table")
sqlDrop(db,"regr_results")
sqlDrop(db,"regr_stats")
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlDrop(db,"main_table")
sqlDrop(db,"regr_results")
sqlDrop(db,"regr_stats")
odbcClose(db)
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
df_main
df_regr_results <- sqlQuery(db, "select * from regr_results")
df_regr_results
splitTime <- strsplit(as.character(Sys.time())," ")
line <- data.frame(station_id = input$choice,
date_anal = splitTime[[1]][1],
time_anal = splitTime[[1]][2],
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = "testing",
data_type = input$type)
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T))
sqlTables(db)
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=F))
line
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T))
sqlDrop(db,"main_table")
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T))
sqlDrop(db,"main_table")
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=F))
line$star_date
line$start_date
sqlClear(db,"main_table")
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=F))
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T))
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
names(df_main)
names(line)
df_main
?sqlSave
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T, safer=F))
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T, safer=F,verbose=T))
line <- data.frame(station_id = input$choice,
date_anal = splitTime[[1]][1],
time_anal = splitTime[[1]][2],
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing",
data_type = input$type)
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T))
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=F))
odbcClose(db)
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlTables(db)
sqlDrop("main_tab;e")
sqlDrop(db,"main_table")
sqlTables(db)
sqlDrop(db,"df_regr_results")
sqlDrop(db,"df_regr_stats")
try(sqlSave(db, line, tablename="main_table",
rownames=FALSE, append=T))
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlClear(db,"main_table")
sqlClear(db,"regr_results")
sqlClear(db,"regr_stats")
odbcClose(db)
shiny::runApp()
shiny::runApp()
save.image("20140816_TempImage.Rdata")
rm(list=ls())
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlClear(db,"main_table")
sqlClear(db,"regr_results")
sqlClear(db,"regr_stats")
odbcClose(db)
rm(list=ls())
shiny::runApp()
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
dat <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
#    hist(dat$slope)
odbcClose(db)
rm(list=ls())
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
dat <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
#    hist(dat$slope)
odbcClose(db)
p1 <- ggplot(dat, aes(x=dat$slope[dat$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
p2 <- ggplot(subset(dat,data_type=="rain"), aes(x=dat$slope[dat$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
p3 <- ggplot(subset(dat,data_type="max_temp"), aes(x=dat$slope[dat$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
p4 <- ggplot(subset(dat,data_type=="min_temp"), aes(x=dat$slope[dat$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
multiplot(p1,p2,p3,p4,cols=2)
subset(dat,data_type="max_temp")
p1 <- ggplot(dat, aes(x=dat$slope[dat$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
p2 <- ggplot(dr, aes(x=dr$slope[dr$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
dmt <- subset(dat,data_type=="max_temp")
p3 <- ggplot(dmt, aes(x=dmt$slope[dmt$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
dmit <- subset(dat,data_type=="min_temp")
p4 <- ggplot(dmit, aes(x=dmit$slope[dmit$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
multiplot(p1,p2,p3,p4,cols=2)
ggplot(dmit, aes(x=dmit$slope[dmit$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
dmit <- subset(dat,data_type=="min_temp")
dmit
p1 <- ggplot(dat, aes(x=dat$slope[dat$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
vec <- p1
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope[dr$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
vec <- c(vec,p2)
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt > 0)) {
p3 <- ggplot(dmt, aes(x=dmt$slope[dmt$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
vec <- c(vec,p3)
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope[dmit$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
vec <- c(vec, p4)
}
multiplot(vec)
multiplot(p1,p2,p3,p4)
p1
dat
p1 <- ggplot(dat, aes(x=dat$slope[dat$p_slope<0.05])) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
p1
dat$slope[dat$p_slope<0.05]
dat <- dat[dat$slope < 0.05,]
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
p1
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt > 0)) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
multiplot(p1,p2,p3,p4)
multiplot(p1,exists(p2),exists(p3),exists(p4))
?exists
multiplot(p1,exists("p2"),exists("p3"),exists("p4"))
multiplot(p1,exists("p2"),exists("p3"),exists("p4"))
multiplot(p1,exists("p2"),exists("p3"),exists("p4"))
multiplot(p1,if (exists("p2")) {p2},if (exists("p3")) {p3}, if (exists("p4")) {p4})
multiplot(p1,if (exists("p2")) {p2},if (exists("p3")) {p3}, ifelse(exists("p4"),p4,NA))
multiplot(p1,ifelse(exists("p2"),p2,NA),ifelse(exists("p3"),p3,NA), ifelse(exists("p4"),p4,NA))
if (exists("p2" & "p3" & "p4")) multiplot(p1,p2,p3,p4)
if (exists("p2" & "p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4" & "p3")) multiplot(p1,p2)
if (!exists("p4" & "p3" & "p2")) p1
if (!exists("p2") & exists("p3" & "p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2" & "p4")) multiplot(p1,p2,p4)
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
(exists("p2") & exists("p3") & exists("p4"))
rm("p4")
nrow(dmit)
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
(exists("p2") & exists("p3") & exists("p4"))
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
output$histogram <- renderPlot({
if (input$goButton == 0)
return()
#
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
dat <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
#    hist(dat$slope)
odbcClose(db)
# only run when submit is pushed??
dat <- dat[dat$slope < 0.05,]
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
})
shiny::runApp()
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
dat <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
#    hist(dat$slope)
odbcClose(db)
dat <- dat[dat$slope < 0.05,]
dat
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
p1
dr <- dat[dat$data_type=="rain",]
dr
nrow(dr) > 0
dat <- data.frame(dat)
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- dat[dat$data_type=="rain",]
if (nrow(dr) > 0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- dat[dat$data_type=="max_temp",]
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- dat[dat$data_type=="min_temp",]
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
shiny::runApp()
rm(dat)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
odbcClose()
odbcClose(db)
odbcClose(db)
shiny::runApp()
shiny::runApp()
??ggplot
?env
??env
shiny::runApp()
?hist
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
