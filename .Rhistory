raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
?bunzip2
require(Rutils)
install.packages("Rutils")
require(Rutils)
??bunzip
raindata <- read.table(unzip(temp, files=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""),"r"))
unlink(temp)
temp <- tempfile(tmpdir=getwd())
temp
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
temp
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""),"r")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
?download.file
temp
close(temp)
unlink(temp)
unlink(temp)
unlink(temp)
unlink(temp)
url(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
mode="wb")
url(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
)
?tempfile
temp <- tempfile(pattern="tempfile",tmpdir=getwd(),fileext="zip")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
temp <- tempfile(pattern="tempfile",tmpdir=getwd(),fileext=".zip")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
raindata <- read.csv(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
raindata <- read.csv(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
con <- unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
raindata <- read.csv(con)
con <- unzip(temp)
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
con <- unzip(temp)
?unzip
?download.file
temp <- paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep="")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
unzip(temp)
temp
getwd()
?reactiveValues
??reactiveValues
shiny::runApp()
shiny::runApp()
load("stations.Rdata")
head(stations)
input$Station <- "Harden"
input <- list()
input$Station <- "Harden"
input$state <- "NSW"
name <- list()
name$name <- stations[grep(input$Station,stations$Site_name,
ignore.case=T),c("Site","STA")]
name$name2 <- name$name[grep(input$state),name$name[,2],]
name$name
name$name2 <- name$name[grep(input$state),name$name$STA,]
name$name$STA
name$name2 <- name$name[grep(input$state),as.character(name$name$STA),]
name$name2 <- name$name[grep(input$state),as.character(name$name$STA)]
ncol(name$name)
name$name2 <- name$name[grep(input$state,name$name$STA,]
name$name2 <- name$name[grep(input$state,name$name$STA),]
name$name2
head(stations)
name$name <- stations[grep(input$Station,stations$Site_name,
ignore.case=T),c("Site","Site_name","STA")]
name$name2 <- name$name[grep(input$state,name$name$STA),]
name$name2
shiny::runApp()
?bootStrapPage
?bootstrapPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
install.packages("RODBC")
shiny::runApp()
?dateRangeInput
require(shiny)
?dateRangeInput
SysDate()
Syssate()
Sysdate()
sysDate()
??Sys
?Sys.date
?Sys.Date
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?paste
shiny::runApp()
shiny::runApp()
?match
shiny::runApp()
?collapse
??collapse
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?cat
shiny::runApp()
?switch
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- 1:10
y <- 2*x+rnorm(10)
lm.test <- lm(y~x)
summary(lm.test)
summary(lm.test)$Coefficients
str(summary(lm.test))
summary(lm.test)$coefficients
summary(lm.test)$coefficients[2,4]
coef(lm.test)
coef(lm.test)[2]
lm.mod
lm.test
summary(lm.test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(RODBC)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_regr_results <- sqlQuery(db, "select * from regr_results")
df_regr_stats <- sqlQuery(db, "select * from regr_stats")
df_main''
df_main
ncol(df_main)
df_main <- cbind(df_main,c("35609","2014-01-01", "21:04:06","1956-01-01","1956-01-02","testing"))
df_main <- rbind(df_main,c("35609","2014-01-01", "21:04:06","1956-01-01","1956-01-02","testing"))
df_main
df_main <- sqlQuery(db, "select * from main_table")
df_main
df_main[1,] <- c("35609","2014-01-01", "21:04:06","1956-01-01","1956-01-02","testing")
df_main
shiny::runApp()
shiny::runApp()
splitTime <- strsplit(as.character(Sys.time())," ")
shiny::runApp()
shiny::runApp()
library(shiny)
library(RODBC)
# connect to data source
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_regr_results <- sqlQuery(db, "select * from regr_results")
df_regr_stats <- sqlQuery(db, "select * from regr_stats")
View(df_regr_results)
df_regr_results
?lm
odbcClose(db)
x <- seq(1,10)
x <- seq(1,100)
x <- 1:100
y <- 2*x +3 +rnorm(100)
lm(y~x)
test <- lm(y~x)
coefficients(test)
summary(test)
summary(test)$coefficients
summary(test)$coefficients[1,1]
df_regr_stats
mod.sum <- summary(lm.mod)
summary(test)
str(summary(test))
summary(test)$fstatistic
?sqSave
?sqlSave
shiny::runApp()
df_main
shiny::runApp()
df_main
df_regr_results
shiny::runApp()
names(df_main)
shiny::runApp()
df_main
names(df_main)
sqlUpdate(db, df_main, tablename="main_table")
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
df_main <- sqlQuery(db, "select * from main_table")
sqlUpdate(db, df_main, tablename="main_table")
shiny::runApp()
splitTime <- strsplit(as.character(Sys.time())," ")
splitTime
splitTime[[1]][1]
shiny::runApp()
odbcClose(db)
odbcClose(db)
shiny::runApp()
?on.exit
shiny::runApp()
shiny::runApp()
odbcClose(db)
?sqlSave
shiny::runApp()
shiny::runApp()
shiny::runApp()
odbcClose(db)
odbcClose(db)
shiny::runApp()
shiny::runApp()
?onClose
??onClose
?>exit
??exit
??execute
?dbdisconnect
??dbdisconnect
??db.disconnect
??disconnect
??db
??close
shiny::runApp()
shiny::runApp()
?odbc
??odbc
library(shiny)
library(RODBC)
# connect to data source
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_main
odbcClose(db)
library(shiny)
library(RODBC)
# connect to data source
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_main
df_main[1,] <- c("400352", Sys.Date(), "10:00:00", "2000-01-01", "2005-01-01", "testing", "rain")
sqlSave(db, df_main, tablename="main_table", rownames=FALSE,safer=F)
?sqlSave
df_main
sqlDrop(db, sqtable="main_table")
sqlSave(db, df_main, tablename="main_table", rownames=FALSE)
shiny::runApp()
str(df_main)
df_main <- sqlQuery(db, "select * from main_table")
str(df_main)
?sqlQuery
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,6,7))
str(df_main)
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,6,7),
stringsAsFactors=F)
str(df_main)
df_regr_results <- sqlQuery(db, "select * from regr_results")
str(df_regr_results)
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
str(df_main)
df_main[1,] <- c("400352", as.Date(Sys.Date()), "10:00:00", "2000-01-01", "2005-01-01", "testing", "rain")
df_main[1,] <- c("400352", as.Date(Sys.Date()), "10:00:00", "2000-01-01", "2005-01-01", "testing", "rain")
try(sqlDrop(db, sqtable="main_table", errors = F), silent=T)
sqlSave(db, df_main, tablename="main_table", rownames=FALSE,safer=F)
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
str(df_main)
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("stations.Rdata")
?grep
head(stations)
grep("cootamundra", stations)
grep("cootamundra", stations,ignore.case=T)
grep("cootam", stations,ignore.case=T)
grep("harden", stations,ignore.case=T)
grep("harden", stations$SITE_NAME,ignore.case=T)
grep("harden", stations$Site_name,ignore.case=T)
grep("cootamundra", stations$Site_name,ignore.case=T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(RODBC)
load("stations.Rdata")
# Source the dataripper script to get the data from the BOM site
# This is adaption of Jason Lessels' bomDailyDataripper
source("dataripper.r")
plot.fun <- function(Dates = DateInput(),
Data=StationInput(),
d.type=input$type) {
# define labels
if (d.type=="rain") lab <- "Rainfall"; plot.t <- "h"
if (d.type=="min_temp") lab <- "Minimum Temperature"; plot.t <- "l"
if (d.type=="max_temp") lab <- "Maximum Temperature"; plot.t <- "l"
# find begin and end dates from info
time1 <- match(Dates$Startdate,Data$Date)
time2 <- match(Dates$Enddate,Data$Date)
# make the plot
plot(Data$Date[time1:time2],
Data[time1:time2,6],
type=plot.t,col="blue",
xlab= "Date", ylab=lab)
lines(Data$Date[time1:time2],Dates$lm.line, col="red",lty=2,lwd=3)
}
input$Station <- "Cootamundra"
input <- list()
input$Station <- "Cootamundra"
name <- list()
name$name <- stations[grep(input$Station,stations$Site_name,
ignore.case=T),c("Site","Site_name","STA")]
name$name
input$state <- NSW
input$state <- "NSW"
name$name2 <- name$name[grep(input$state,name$name$STA),]
name$name2
str(name)
name$name2$Site
?uiOutput
input$choice <- name$name2$Site[5]
input$type <- "rain"
data <- bomDailyObs(input$choice,observation=input$type)
head(data)
input$dateRange <- c("1990-01-01", as.Date(Sys.date))
input$dateRange <- c("1990-01-01", as.Date(Sys.date()))
input$dateRange <- c("1990-01-01", as.Date(Sys.Date()))
input$dateRange
Sys.Date
Sys.Date()
input$dateRange <- c("1990-01-01", Sys.Date())
Sys.Date()
input$dateRange
input$dateRange <- c("1990-01-01", format(Sys.Date(),"%Y-%m-%d")
)
input$dateRange
begin <- input$dateRange[1]
end <- input$dateRange[2]
StationInput <- reactive({
if (input$goButton == 0)
return()
# use dataripper to download data from BOM station
data <- bomDailyObs(input$choice,observation=input$type)
return(data)
})
if (begin >= min(StationInput()$Date)) {
dates$Startdate <- begin
dates$StartMsg <- paste("data analysis will start from",begin)
} else {
dates$Startdate <- min(StationInput()$Date)
dates$StartMsg <- paste("the data only starts at", min(StationInput()$Date))
})
if (begin >= min(StationInput()$Date)) {
dates$Startdate <- begin
dates$StartMsg <- paste("data analysis will start from",begin)
} else {
dates$Startdate <- min(StationInput()$Date)
dates$StartMsg <- paste("the data only starts at", min(StationInput()$Date))
}
temp <- match(dates$Startdate,data$Date)#StationInput()$Date)
begin
dates$Startdate <- min(data$Date)#StationInput()$Date)
dates <- list()
dates$Startdate <- min(data$Date)#StationInput()$Date)
dates$Enddate <- max(data$Date)
temp <- match(dates$Startdate,data$Date)#StationInput()$Date)
temp
temp2 <- match(dates$Enddate,data$Date)#StationInput()$Date)
tmep2
temp2
shiny::runApp()
df <- data.frame(time=1:nrow(data[temp:temp2,]),#StationInput()[temp:temp2,]),
response=data[temp:temp2,6] #StationInput()[temp:temp2,6])
# run the regression (start simple with just linear)
lm.mod <- lm(response~time,df)
df <- data.frame(time=1:nrow(data[temp:temp2,]),#StationInput()[temp:temp2,]),
response=data[temp:temp2,6]) #StationInput()[temp:temp2,6])
# run the regression (start simple with just linear)
lm.mod <- lm(response~time,df)
splitTime <- strsplit(as.character(Sys.time())," ")
lm.line <- predict(lm.mod,
new.data=data.frame(time=1:nrow(data[temp:temp2,],#StationInput()[temp:temp2,]),
response=rep(0,nrow(df))))
lm.line <- predict(lm.mod,
new.data=data.frame(time=1:nrow(data[temp:temp2,]),#StationInput()[temp:temp2,]),
response=rep(0,nrow(df))))
#
dates$lm.line[as.numeric(names(lm.line))] <- lm.line
dates$lm.mod <- lm.mod
shiny::runApp()
shiny::runApp()
shiny::runApp()
Data <- data
Dates <- list()
Dates$Startdate <- "1990-01-01"
Dates$Startdate <- begin
Dates$Enddate <- end
d.type="rain"
if (d.type=="rain") lab <- "Rainfall"; plot.t <- "h"
if (d.type=="min_temp") lab <- "Minimum Temperature"; plot.t <- "l"
if (d.type=="max_temp") lab <- "Maximum Temperature"; plot.t <- "l"
# find begin and end dates from info
time1 <- match(Dates$Startdate,Data$Date)
time2 <- match(Dates$Enddate,Data$Date)
time1
Dates$Startdate
Data$Date
Dates$Startdate
Dates$Startdate <- "1995-01-01"
time1 <- match(Dates$Startdate,Data$Date)
time2 <- match(Dates$Enddate,Data$Date)
time1
head(Data)
is.character(Data$Date)
as.Date(Dates$Startdate)
time1 <- match(as.Date(Dates$Startdate),as.Date(Data$Date))
time1
time2 <- match(as.Date(Dates$Enddate),as.Date(Data$Date))
plot(Data$Date[time1:time2],
Data[time1:time2,6],
type=plot.t,col="blue",
xlab= "Date", ylab=lab)
lm.line
shiny::runApp()
shiny::runApp()
head(lm.line)
shiny::runApp()
shiny::runApp()
time1
time2
is.numeric(time2)
time1 <- match(as.Date(Dates$Startdate),as.Date(Data$Date))
time1
plot(Data$Date[time1:time2],
Data[time1:time2,6],
type=plot.t,col="blue",
xlab= "Date", ylab=lab)
lines(Data$Date[time1:time2],Dates$lm.line, col="red",lty=2,lwd=3)
Dates$lm.line
shiny::runApp()
head(Daat)
head(Data)
Data$Date[time1:time2]
Data[time1:time2,6]
shiny::runApp()
