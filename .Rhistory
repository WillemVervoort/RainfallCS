plot(as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-")), cum.rain(test2), type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
MonRain[,1]
as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-"))
cum.rain(test2)
cum.rain <- function(x, log=T){
dat <- vector()
avg <- mean(x,na.rm=T)
dat[1] <- x[1]-avg
bad <- is.na(x)
x[bad] <- avg
for (i in 2:length(x)) {
dat[i] <- dat[i-1] + (x[i]-avg)
}
dat[bad] <- NA
return(dat)
}
test2 <- MonRain$x - MonPET$x
test2
plot(as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-")), cum.rain(test2), type="l",
xlab="Date", ylab="monhtly 'water balance' P - 0.1*maxT")
plot(as.Date(paste(MonRain[,2],MonRain[,1],"01",sep="-")), dat, type="l",
xlab="Date", ylab="monthly 'water balance' P - 0.1*maxT")
xx <- faithful$eruptions
fit <- density(xx)
plot(fit)
?rev
xx <- faithful$eruptions
fit1 <- density(xx)
fit2 <- replicate(10000, {
x <- sample(xx,replace=T);
density(x,from=min(fit1$x), to=max(fit1$x))$y
})
fit3 <- apply(fit2,1,quantile,c(0.025,0.975))
head(fit1)
str(fit1)
str(fit3)
head(fit3)
plot(fit1,ylim=range(fit))
polygon(c(fit1$x,rev(fit1$x)),
c(fit3[1,],rev(fit3[2,])),
col='grey',border=F)
lines(fit1)
plot(fit1,ylim=range(fit3))
polygon(c(fit1$x,rev(fit1$x)),
c(fit3[1,],rev(fit3[2,])),
col='grey',border=F)
lines(fit)
install.packages("Rcpp")
setInternet2(TRUE)
install.packages("Rcpp")
install.packages("inline")
install.packages("Rcpp")
install.packages(compiler)
install.packages("compiler")
require(compiler)
require(compiler)
?cmpfun
library(rbenchmark)
install.packages("rbenchmark")
library(rbenchmark)
N <- 35     ## same parameter as original post
res <- benchmark(fibR(N),
fibRC(N),
fibRcpp(N),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative",
replications=1)
print(res)  ## show result
require(compiler)
## A C++ version compile with cppFunction
fibRcpp <- cppFunction( '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}
' )
## for comparison, the original (but repaired with 0/1 offsets)
fibR <- function(seq) {
if (seq == 0) return(0);
if (seq == 1) return(1);
return (fibR(seq - 1) + fibR(seq - 2));
}
## also use byte-compiled R function
fibRC <- cmpfun(fibR)
## load rbenchmark to compare
library(rbenchmark)
N <- 35     ## same parameter as original post
res <- benchmark(fibR(N),
fibRC(N),
fibRcpp(N),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative",
replications=1)
print(res)  ## show result
require(inline)
fibRcpp <- cppFunction( '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}
' )
?cppFunction
?cppfunction
??cppFunction
require(Rcpp)
fibRcpp <- cppFunction( '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}
' )
N <- 35     ## same parameter as original post
res <- benchmark(fibR(N),
fibRC(N),
fibRcpp(N),
columns=c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"),
order="relative",
replications=1)
print(res)  ## show result
install.packages("shiny")
?getSymbols
??getSymbols
?switch
shiny::runApp('GitHub/RainfallCS/RainfallCS')
temp <- tempfile()
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep=""),"r"))
unlink(temp)
input <- list()
input$Station <- "Harden"
setwd("C:\\Users\\rver4657\\Documents\\Github\\RainfallCS")
load("stations.Rdata")
setwd("C:\\Users\\rver4657\\Documents\\Github\\RainfallCS\\RainfallCS")
load("stations.Rdata")
SelectStation <- stations[grep(input$Station,
stations$Site_name,ignore.case=T),"Site"]
# temporary, just use the first one, later work out how to deal with this
SelectStation <- SelectStation[1]
SelectStation
temp <- tempfile()
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep=""),"r"))
unlink(temp)
?unz
unz("temp", paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep=""),"r")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
temp
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
?tempfile()
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
?bunzip2
require(Rutils)
install.packages("Rutils")
require(Rutils)
??bunzip
raindata <- read.table(unzip(temp, files=paste("IDCJAC0009_0",SelectStation,"_1800.csv",sep=""),"r"))
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""),"r"))
unlink(temp)
temp <- tempfile(tmpdir=getwd())
temp
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp, mode="wb")
temp
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""),"r")
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
?download.file
temp
close(temp)
unlink(temp)
unlink(temp)
unlink(temp)
unlink(temp)
url(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
mode="wb")
url(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
)
?tempfile
temp <- tempfile(pattern="tempfile",tmpdir=getwd(),fileext="zip")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
temp <- tempfile(pattern="tempfile",tmpdir=getwd(),fileext=".zip")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
raindata <- read.table(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp)
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
raindata <- read.csv(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
raindata <- read.csv(unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep="")))
unlink(temp)
unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
con <- unz(temp, filename=paste("IDCJAC0009_0",SelectStation,"_1800_Data.csv",sep=""))
raindata <- read.csv(con)
con <- unzip(temp)
temp <- tempfile(tmpdir=getwd())
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
con <- unzip(temp)
?unzip
?download.file
temp <- paste("IDCJAC0009_0",SelectStation,"_1800.zip",sep="")
download.file(paste("http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=0",SelectStation,"&p_c=-1069999971&p_nccObsCode=136&p_startYear=2014",sep=""),
temp,mode="w+")
unzip(temp)
temp
getwd()
?reactiveValues
??reactiveValues
shiny::runApp()
shiny::runApp()
load("stations.Rdata")
head(stations)
input$Station <- "Harden"
input <- list()
input$Station <- "Harden"
input$state <- "NSW"
name <- list()
name$name <- stations[grep(input$Station,stations$Site_name,
ignore.case=T),c("Site","STA")]
name$name2 <- name$name[grep(input$state),name$name[,2],]
name$name
name$name2 <- name$name[grep(input$state),name$name$STA,]
name$name$STA
name$name2 <- name$name[grep(input$state),as.character(name$name$STA),]
name$name2 <- name$name[grep(input$state),as.character(name$name$STA)]
ncol(name$name)
name$name2 <- name$name[grep(input$state,name$name$STA,]
name$name2 <- name$name[grep(input$state,name$name$STA),]
name$name2
head(stations)
name$name <- stations[grep(input$Station,stations$Site_name,
ignore.case=T),c("Site","Site_name","STA")]
name$name2 <- name$name[grep(input$state,name$name$STA),]
name$name2
shiny::runApp()
?bootStrapPage
?bootstrapPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
install.packages("RODBC")
shiny::runApp()
?dateRangeInput
require(shiny)
?dateRangeInput
SysDate()
Syssate()
Sysdate()
sysDate()
??Sys
?Sys.date
?Sys.Date
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?paste
shiny::runApp()
shiny::runApp()
?match
shiny::runApp()
?collapse
??collapse
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?cat
shiny::runApp()
?switch
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- 1:10
y <- 2*x+rnorm(10)
lm.test <- lm(y~x)
summary(lm.test)
summary(lm.test)$Coefficients
str(summary(lm.test))
summary(lm.test)$coefficients
summary(lm.test)$coefficients[2,4]
coef(lm.test)
coef(lm.test)[2]
lm.mod
lm.test
summary(lm.test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(RODBC)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_regr_results <- sqlQuery(db, "select * from regr_results")
df_regr_stats <- sqlQuery(db, "select * from regr_stats")
df_main''
df_main
ncol(df_main)
df_main <- cbind(df_main,c("35609","2014-01-01", "21:04:06","1956-01-01","1956-01-02","testing"))
df_main <- rbind(df_main,c("35609","2014-01-01", "21:04:06","1956-01-01","1956-01-02","testing"))
df_main
df_main <- sqlQuery(db, "select * from main_table")
df_main
df_main[1,] <- c("35609","2014-01-01", "21:04:06","1956-01-01","1956-01-02","testing")
df_main
shiny::runApp()
shiny::runApp()
splitTime <- strsplit(as.character(Sys.time())," ")
shiny::runApp()
shiny::runApp()
library(shiny)
library(RODBC)
# connect to data source
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_regr_results <- sqlQuery(db, "select * from regr_results")
df_regr_stats <- sqlQuery(db, "select * from regr_stats")
View(df_regr_results)
df_regr_results
?lm
odbcClose(db)
x <- seq(1,10)
x <- seq(1,100)
x <- 1:100
y <- 2*x +3 +rnorm(100)
lm(y~x)
test <- lm(y~x)
coefficients(test)
summary(test)
summary(test)$coefficients
summary(test)$coefficients[1,1]
df_regr_stats
mod.sum <- summary(lm.mod)
summary(test)
str(summary(test))
summary(test)$fstatistic
?sqSave
?sqlSave
shiny::runApp()
df_main
shiny::runApp()
df_main
df_regr_results
shiny::runApp()
names(df_main)
shiny::runApp()
df_main
names(df_main)
sqlUpdate(db, df_main, tablename="main_table")
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
df_main <- sqlQuery(db, "select * from main_table")
sqlUpdate(db, df_main, tablename="main_table")
shiny::runApp()
splitTime <- strsplit(as.character(Sys.time())," ")
splitTime
splitTime[[1]][1]
shiny::runApp()
odbcClose(db)
odbcClose(db)
shiny::runApp()
?on.exit
shiny::runApp()
shiny::runApp()
odbcClose(db)
?sqlSave
shiny::runApp()
shiny::runApp()
shiny::runApp()
odbcClose(db)
odbcClose(db)
shiny::runApp()
shiny::runApp()
?onClose
??onClose
?>exit
??exit
??execute
?dbdisconnect
??dbdisconnect
??db.disconnect
??disconnect
??db
??close
shiny::runApp()
shiny::runApp()
?odbc
??odbc
library(shiny)
library(RODBC)
# connect to data source
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_main
odbcClose(db)
library(shiny)
library(RODBC)
# connect to data source
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
# # testing ODBC
# # find the names of the available tables
# sqlTables(db)
#
# load the different tables into a data fram
df_main <- sqlQuery(db, "select * from main_table")
df_main
df_main[1,] <- c("400352", Sys.Date(), "10:00:00", "2000-01-01", "2005-01-01", "testing", "rain")
sqlSave(db, df_main, tablename="main_table", rownames=FALSE,safer=F)
?sqlSave
df_main
sqlDrop(db, sqtable="main_table")
sqlSave(db, df_main, tablename="main_table", rownames=FALSE)
shiny::runApp()
str(df_main)
df_main <- sqlQuery(db, "select * from main_table")
str(df_main)
?sqlQuery
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,6,7))
str(df_main)
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,6,7),
stringsAsFactors=F)
str(df_main)
df_regr_results <- sqlQuery(db, "select * from regr_results")
str(df_regr_results)
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
str(df_main)
df_main[1,] <- c("400352", as.Date(Sys.Date()), "10:00:00", "2000-01-01", "2005-01-01", "testing", "rain")
df_main[1,] <- c("400352", as.Date(Sys.Date()), "10:00:00", "2000-01-01", "2005-01-01", "testing", "rain")
try(sqlDrop(db, sqtable="main_table", errors = F), silent=T)
sqlSave(db, df_main, tablename="main_table", rownames=FALSE,safer=F)
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
str(df_main)
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("stations.Rdata")
?grep
head(stations)
grep("cootamundra", stations)
grep("cootamundra", stations,ignore.case=T)
grep("cootam", stations,ignore.case=T)
grep("harden", stations,ignore.case=T)
grep("harden", stations$SITE_NAME,ignore.case=T)
grep("harden", stations$Site_name,ignore.case=T)
grep("cootamundra", stations$Site_name,ignore.case=T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
