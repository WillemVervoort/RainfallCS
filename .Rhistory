geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt > 0)) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
multiplot(p1,p2,p3,p4)
multiplot(p1,exists(p2),exists(p3),exists(p4))
?exists
multiplot(p1,exists("p2"),exists("p3"),exists("p4"))
multiplot(p1,exists("p2"),exists("p3"),exists("p4"))
multiplot(p1,exists("p2"),exists("p3"),exists("p4"))
multiplot(p1,if (exists("p2")) {p2},if (exists("p3")) {p3}, if (exists("p4")) {p4})
multiplot(p1,if (exists("p2")) {p2},if (exists("p3")) {p3}, ifelse(exists("p4"),p4,NA))
multiplot(p1,ifelse(exists("p2"),p2,NA),ifelse(exists("p3"),p3,NA), ifelse(exists("p4"),p4,NA))
if (exists("p2" & "p3" & "p4")) multiplot(p1,p2,p3,p4)
if (exists("p2" & "p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4" & "p3")) multiplot(p1,p2)
if (!exists("p4" & "p3" & "p2")) p1
if (!exists("p2") & exists("p3" & "p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2" & "p4")) multiplot(p1,p2,p4)
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
(exists("p2") & exists("p3") & exists("p4"))
rm("p4")
nrow(dmit)
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
(exists("p2") & exists("p3") & exists("p4"))
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
output$histogram <- renderPlot({
if (input$goButton == 0)
return()
#
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
dat <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
#    hist(dat$slope)
odbcClose(db)
# only run when submit is pushed??
dat <- dat[dat$slope < 0.05,]
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- subset(dat,data_type=="min_temp")
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
})
shiny::runApp()
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
dat <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
#    hist(dat$slope)
odbcClose(db)
dat <- dat[dat$slope < 0.05,]
dat
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
p1
dr <- dat[dat$data_type=="rain",]
dr
nrow(dr) > 0
dat <- data.frame(dat)
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- dat[dat$data_type=="rain",]
if (nrow(dr) > 0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- dat[dat$data_type=="max_temp",]
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
}
dmit <- dat[dat$data_type=="min_temp",]
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
shiny::runApp()
rm(dat)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
odbcClose()
odbcClose(db)
odbcClose(db)
shiny::runApp()
shiny::runApp()
??ggplot
?env
??env
shiny::runApp()
?hist
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
str(ozmap)
str(oz.map)
oz.map <- read.csv("ozdata.csv")
str(oz.map)
head(stations)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
library(RODBC)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
test
?sqlCreate
?sql
?sqlDrop
setwd("E:/willem/teaching/mulwaree")
# read in the data
data <- read.csv("PiezoDataCorrected-Mulwaree.csv",skip=1)
head(data)
# Makes some plots
# Rainfall versus piezo levels
# Makes some plots
plot(data$Monthly_Rainfall_.mm.,data$Top_Level..cm.,
xlab="Rainfall (mm)",ylab="Piezo level (cm from top)",
col="blue",lwd=2)
points(data$Monthly_Rainfall_.mm.,data$Bottom_Level,pch=2,col="red",lwd=2)
legend("right",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
plot(data$Monthly_Rainfall_.mm.,data$Top_Level..cm.,
xlab="Rainfall (mm)",ylab="Piezo level (cm from top)",
col="blue",lwd=2)
points(data$Monthly_Rainfall_.mm.,data$Bottom_Level,pch=2,col="red",lwd=2)
legend("right",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
plot(as.Date(data$Date,"%d/%m/%Y"),data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(5,250))
points(as.Date(data$Date,"%d/%m/%Y"),data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),data[,2],type="h",col="green")
legend("topleft",c("top piezometer","bottom piezometer","Rainfall"),pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1))
plot(data$Top_Level..cm.,data$Top_EC..dS.m.,
xlab="Piezo level (cm from top)",ylab="EC (dS/m)",
col="blue",lwd=2)
points(data$Bottom_Level,data$Bottom_EC,
col="red",lwd=2,pch=2)
legend("topright",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
names(data)
data <- read.csv("PiezoData-Mulwaree.csv",skip=1)
head(data)
# Makes some plots
# Rainfall versus piezo levels
plot(data$Monthly_Rainfall_.mm.,data$Top_Level..cm.,
xlab="Rainfall (mm)",ylab="Piezo level (cm from top)",
col="blue",lwd=2)
points(data$Monthly_Rainfall_.mm.,data$Bottom_Level,pch=2,col="red",lwd=2)
legend("right",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
# Plot by date, rainfall in bars from top
plot(as.Date(data$Date,"%d/%m/%Y"),data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(5,250))
points(as.Date(data$Date,"%d/%m/%Y"),data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),data[,2],type="h",col="green")
legend("topleft",c("top piezometer","bottom piezometer","Rainfall"),pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1))
# Plot level and EC
plot(data$Top_Level..cm.,data$Top_EC..dS.m.,
xlab="Piezo level (cm from top)",ylab="EC (dS/m)",
col="blue",lwd=2)
points(data$Bottom_Level,data$Bottom_EC,
col="red",lwd=2,pch=2)
legend("topright",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
# Correct the values of EC that are smaller than 1
data$Top_EC..dS.m. <- ifelse(data$Top_EC..dS.m. < 1,10*data$Top_EC..dS.m.,data$Top_EC..dS.m.)
data$Bottom_EC..dS.m. <- ifelse(data$Bottom_EC..dS.m. < 1,10*data$Bottom_EC..dS.m.,data$Top_EC..dS.m.)
# Plot again
# Plot level and EC
plot(data$Top_Level..cm.,data$Top_EC..dS.m.,
xlab="Piezo level (cm from top)",ylab="EC (dS/m)",
col="blue",lwd=2)
points(data$Bottom_Level,data$Bottom_EC,
col="red",lwd=2,pch=2)
legend("topright",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
data <- read.csv("PiezoData-Mulwaree.csv",skip=1)
# Correct the values of EC that are smaller than 1
data$Top_EC..dS.m. <- ifelse(data$Top_EC..dS.m. < 1,10*data$Top_EC..dS.m.,data$Top_EC..dS.m.)
data$Bottom_EC..dS.m. <- ifelse(data$Bottom_EC < 1,10*data$Bottom_EC,data$Bottom_EC)
# Plot again
# Plot level and EC
plot(data$Top_Level..cm.,data$Top_EC..dS.m.,
xlab="Piezo level (cm from top)",ylab="EC (dS/m)",
col="blue",lwd=2)
points(data$Bottom_Level,data$Bottom_EC,
col="red",lwd=2,pch=2)
legend("topright",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
names(data)
mod.data <- data.frame(level=c(data$Top_Level..cm,Bottom_Level),
ID = c(rep("Top",nrow(data)),rep("Bottom",nrow(Data)),
EC =c(data$Top_EC..dS.m.,data$Bottom.EC))
mod.data <- data.frame(level=c(data$Top_Level..cm,Bottom_Level),
ID = c(rep("Top",nrow(data)),rep("Bottom",nrow(Data))),
EC =c(data$Top_EC..dS.m.,data$Bottom.EC))
mod.data <- data.frame(level=c(data$Top_Level..cm,data$Bottom_Level),
ID = c(rep("Top",nrow(data)),rep("Bottom",nrow(Data))),
EC =c(data$Top_EC..dS.m.,data$Bottom.EC))
nrow(data)
mod.data <- data.frame(level=c(data$Top_Level..cm,data$Bottom_Level),
ID = c(rep("Top",nrow(data)),rep("Bottom",nrow(data))),
EC =c(data$Top_EC..dS.m.,data$Bottom.EC))
EC.mod <- lm(EC~level,data=mod.data)
summary(EC.mod)
mod.data <- data.frame(level=c(-data$Top_Level..cm,-data$Bottom_Level),
ID = c(rep("Top",nrow(data)),rep("Bottom",nrow(data))),
EC =c(data$Top_EC..dS.m.,data$Bottom.EC))
EC.mod <- lm(EC~level,data=mod.data)
summary(EC.mod)
plot(-data$Top_Level..cm.,data$Top_EC..dS.m.,
xlab="Piezo level (cm from top)",ylab="EC (dS/m)",
col="blue",lwd=2)
points(-data$Bottom_Level,data$Bottom_EC,
col="red",lwd=2,pch=2)
legend("topright",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA)
setwd("E:/willem/teaching/mulwaree")
data <- read.csv("PiezoData-Mulwaree.csv",skip=1)
head(data)
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,5))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),250-data[,2],type="h",col="green")
legend("topleft",c("top piezometer","bottom piezometer","Rainfall"),pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1))
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,5))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),5-data[,2],type="h",col="green")
legend("topleft",c("top piezometer","bottom piezometer","Rainfall"),pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1))
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,5))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),0-data[,2],type="h",col="green")
legend("topleft",c("top piezometer","bottom piezometer","Rainfall"),pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1))
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,5))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),-250+data[,2],type="h",col="green")
legend("topleft",c("top piezometer","bottom piezometer","Rainfall"),pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1))
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,5))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),0-data[,2],type="h",col="green")
legend("topleft",c("top piezometer","bottom piezometer","Rainfall"),pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1))
mod.data <- data.frame(level=c(-data$Top_Level..cm,-data$Bottom_Level),
ID = c(rep("Top",nrow(data)),rep("Bottom",nrow(data))),
EC =c(data$Top_EC..dS.m.,data$Bottom.EC))
EC.mod <- lm(EC~level,data=mod.data)
summary(EC.mod)
mod.data
pred.data <- predict(EC.mod, new.data=data.frame(GW.level=seq(-250,0),
ID = "predicted", EC = NA))
pred.data
pred.data <- predict(EC.mod, new.data=data.frame(GW.level=seq(-250,0),
ID = "predicted", EC = NA))
# Plot level and EC
plot(-data$Top_Level..cm.,data$Top_EC..dS.m.,
xlab="Piezo level (cm from top)",ylab="EC (dS/m)",
col="blue",lwd=2)
points(-data$Bottom_Level,data$Bottom_EC,
col="red",lwd=2,pch=2)
lines(sort(mod.data$GW.level),pred.data,lty=2, lwd=2, col="darkgreen")
sort(mod.data$GW.level)
mod.data <- data.frame(GW.level=c(-data$Top_Level..cm,-data$Bottom_Level),
ID = c(rep("Top",nrow(data)),rep("Bottom",nrow(data))),
EC =c(data$Top_EC..dS.m.,data$Bottom.EC))
sort(mod.data$GW.level)
lines(sort(mod.data$GW.level),pred.data,lty=2, lwd=2, col="darkgreen")
lm.predict
?lm.predict
?predict.lm
seq(-250,0)
ID = "predicted", EC = NA),na.action=na.exclude)
pred.data <- predict(EC.mod, new.data=data.frame(GW.level=seq(-250,0),
ID = "predicted", EC = NA),na.action=na.exclude)
pred.data
plot(-data$Top_Level..cm.,data$Top_EC..dS.m.,
xlab="Piezo level (cm from top)",ylab="EC (dS/m)",
col="blue",lwd=2)
points(-data$Bottom_Level,data$Bottom_EC,
col="red",lwd=2,pch=2)
# add the line
lines(sort(mod.data$GW.level),pred.data,lty=2, lwd=2, col="darkgreen")
# add the legend
legend("bottomleft",c("top piezometer","bottom piezometer"),pch=c(1,2),
col=c("blue","red"),lwd=2,lty=NA,cex=0.8)
abline(EC.mod,lty=2, lwd=2, col="darkgreen")
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,20))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
#range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),-250+data[,2]/5,type="h",col="green")
legend("bottomleft",c("top piezometer","bottom piezometer","Rainfall"),
pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1),cex=0.8)
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,20))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
#range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),data[,2],type="h",col="green")
legend("bottomleft",c("top piezometer","bottom piezometer","Rainfall"),
pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1),cex=0.8)
plot(as.Date(data$Date,"%d/%m/%Y"),-data$Top_Level..cm.,type="b",
xlab="Date",ylab="Piezo level (cm from top)",
col="blue",lwd=2,ylim=c(-250,0))
points(as.Date(data$Date,"%d/%m/%Y"),-data$Bottom_Level,
col="red",lwd=2,lty=2,pch=2,type="b")
#range(na.omit(data[,2]))
points(as.Date(data$Date,"%d/%m/%Y"),0-data[,2],type="h",col="green")
legend("bottomleft",c("top piezometer","bottom piezometer","Rainfall"),
pch=c(1,2,NA),
col=c("blue","red","green"),lwd=2,lty=c(1,2,1),cex=0.8)
head(stations)
shiny::runApp()
library(ggplot2)
?coord.equal
??coord.equal
?,atch
?match
shiny::runApp()
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_id, slope, p_slope, data_type FROM regr_results"))
head(test)
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_id, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
test <- test[test$p_value_slope < 0.05,]
str(test)
shiny::runApp()
o
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_id, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
test <- test[test$p_value_slope < 0.05,]
st <- sqlQuery(db,paste("SELECT station_id, lat, long FROM main_table"))
st
st <- sqlQuery(db,paste("SELECT station_id, lat, lon FROM main_table"))
st
shiny::runApp()
