if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
(exists("p2") & exists("p3") & exists("p4"))
rm("p4")
nrow(dmit)
if (nrow(dmit)>0) {
p4 <- ggplot(dmit, aes(x=dmit$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Min Temperature slope (degrees C/day)")
}
(exists("p2") & exists("p3") & exists("p4"))
if (exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p2,p3,p4)
if (exists("p2") & exists("p3") & !exists("p4")) multiplot(p1,p2,p3)
if (exists("p2") & !exists("p4") & !exists("p3")) multiplot(p1,p2)
if (!exists("p4") & !exists("p3") & !exists("p2")) p1
if (!exists("p2") & exists("p3") & exists("p4")) multiplot(p1,p3,p4)
if (!exists("p3") & exists("p2") & exists("p4")) multiplot(p1,p2,p4)
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
output$histogram <- renderPlot({
if (input$goButton == 0)
return()
#
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
dat <- sqlQuery(db,paste("SELECT slope, p_slope, data_type FROM regr_results"))
#    hist(dat$slope)
odbcClose(db)
# only run when submit is pushed??
dat <- dat[dat$slope < 0.05,]
p1 <- ggplot(dat, aes(x=dat$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("slope or trend value")
dr <- subset(dat,data_type=="rain")
if (nrow(dr) >0 ) {
p2 <- ggplot(dr, aes(x=dr$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Rainfall slope (mm/day)")
}
dmt <- subset(dat,data_type=="max_temp")
if(nrow(dmt) > 0) {
p3 <- ggplot(dmt, aes(x=dmt$slope)) +
geom_histogram() +
xlab("significant slopes with p-value < 0.05") +
ylab("Max Temperature slope (degrees C/day)")
>>>>>>> parent of 660e9bb... Still working on getting database to write again
}
dataT <- cbind(data.maxT[,1],Temp)
dataT <- dataT[dataT[,1]<2014,]
# Now write to the run directory
write.table(cbind(data.Rain[,1], format(round(data.Rain[2:13],2), nsmall=2)), file="run/monthly_P", row.names=F,col.names=F,quote=F)
write.table(cbind(dataT[,1], format(round(dataT[2:13],2), nsmall=2)), file="run/monthly_T", row.names=F, col.names=F, quote=F)
# Now also write the long term averages
for (i in 1:12) {
dataT[dataT[,i+1]==-99.00,i] <- NA
}
normalT <- apply(dataT[,2:13],2,mean,na.rm=T)
write.table(t(format(round(normalT,3),nsmall=3)),file="run/mon_T_normal",row.names=F,col.names=F,quote=F)
# create the parameter file
AWC = 330.00 # convert inches to mm
Lat = -35.0
write.table(paste(format(AWC,width=10,nsmall=5),format(Lat,width=10, nsmall=3)),file="run/parameter",row.names=F,col.names=F, quote=F)
# don't forget -m flag that sets it to metric
shell("sc-pdsi.exe -m -irun -f column")
PDSI <- read.table("monthly/original/PDSI.clm", header=T)
# put back NA values
PDSI[PDSI[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-50,50))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-10,10))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-15,5))
Zindex <- read.table("monthly/original/ZIND.clm", header=T)
# put back NA values
Zindex[Zindex[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-100,100))
Zindex <- read.table("monthly/original/ZIND.clm", header=T)
# put back NA values
Zindex[Zindex[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-20,10))
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-30,10))
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=T)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(-15,5), col="blue")
Zindex.sc <- read.table("monthly/self_cal/ZIND.clm", header=T)
# put back NA values
Zindex.sc[Zindex.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex.sc[,1],Zindex.sc[,2],"01",sep="-")),
Zindex.sc[,3], type="l",
xlab="Date", ylab="PDSI Z-index self calibrating", ylim=c(-30,10), col="blue")
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(-15,5), col="blue")
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F,nlines=1200)
?read.table
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F, nrows=1200)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(-15,5), col="blue")
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(0,5), col="blue")
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI", ylim=c(-15,8), col="blue")
lines(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")),
PDSI.sc[,3], col="red")
legend("topright",c("original","self calibrating"), col=c("blue","red"))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI", ylim=c(-15,5), col="blue")
lines(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")),
PDSI.sc[,3], col="red")
legend("bottomleft",c("original","self calibrating"), col=c("blue","red"), lty=1)
PDSI <- read.table("monthly/original/PDSI.clm", header=F)
# put back NA values
PDSI[PDSI[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-15,5), col="blue")
Zindex <- read.table("monthly/original/ZIND.clm", header=T)
# put back NA values
Zindex[Zindex[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-30,10), col="blue")
```
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F, nrows=1200)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(0,5), col="blue")
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI", ylim=c(-15,5), col="blue")
lines(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")),
PDSI.sc[,3], col="red")
legend("bottomleft",c("original","self calibrating"), col=c("blue","red"), lty=1)
read.table("monthly/self_cal/PDSI.clm", header=F, nrows=1200)
install.packages("SPEI")
require(SPEI)
data(wichita)
names(wichita)
summary(wichita)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
library(shiny)
library(RODBC)
library(oz)
# for fancier plotting
library(ggplot2)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
df_main
odbcClose(db)
main_table
str(main_table)
str(df_main)
main_table <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = input$type,
timestamp = as.character(Sys.time()),
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing",stringsAsFactors=F)
str(main_table)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=T)
odbcClose(db)
#    # coefficients and stats
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=T)
sqlSave(db,main_table,#tablename="main_table",
rownames=T)
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T)
test <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = input$type,
timestamp = as.character(Sys.time()),
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing",stringsAsFactors=F)
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
odbcClose(db)
db <- odbcConnect("testwillem", uid="root", pwd="WsOL2010MySQL", case="nochange")
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
db <- odbcConnect("testwillem", uid="root", pwd="WsOL2010MySQL", case="nochange")
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
odbcClose(db)
shiny::runApp()
shiny::runApp()
odbcClose(db)
results <- data.frame(station_ID = as.character(input$choice),intercept = mod.res[1,1],
se_int = mod.res[1,2], p_value_int = mod.res[1,4],
slope = mod.res[2,1], se_slope = mod.res[2,2],
p_value_slope = mod.res[2,4], data_type=input$type,
comment="test", stringsAsFactors=F)
mod.res <-  summary(lm.mod)$coefficients
results <- data.frame(station_ID = as.character(input$choice),intercept = mod.res[1,1],
se_int = mod.res[1,2], p_value_int = mod.res[1,4],
slope = mod.res[2,1], se_slope = mod.res[2,2],
p_value_slope = mod.res[2,4], data_type=input$type,
comment="test", stringsAsFactors=F)
str(results)
try(sqlSave(db, results, tablename="regr_results",
rownames=FALSE, append=T))
db <- odbcConnect("testwillem", uid="root", pwd="WsOL2010MySQL", case="nochange")
try(sqlSave(db, results, tablename="regr_results",
rownames=FALSE, append=T))
shiny::runApp()
input$choice
input$type
data <- bomDailyObs(input$choice,observation=input$type))
data <- bomDailyObs(input$choice,observation=input$type)
data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ozmap
oz.map <- read.csv("ozdata.csv")
head(oz.map)
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
st
shiny::runApp()
shiny::runApp()
oz.map <- read.csv("ozdata.csv")
head(oz.map)
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("ggmap")
require(ggmao)
require(ggmap)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
<<<<<<< HEAD
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sidebarLayout
?fluidPage
shiny::runApp()
?tabsetPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
=======
>>>>>>> parent of 660e9bb... Still working on getting database to write again
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
str(st'')
str(st)
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_ID, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
test <- test[test$p_value_slope < 0.05,]
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
str(st'')
str(st)
str(test)
odbcClose(db)
test <- test[test$p_value_slope < 0.05,]
st.out <- cbind(st[st$station_ID %in% test$station_ID,],test[,2:4])
str(st.out)
neg.slope <- test[test$slope < 0,]
st.neg <- cbind(st[st$station_ID %in% neg.slope$station_ID,],neg.slope[,2:4])
pos.slope <- test[test$slope > 0,]
st.pos <- cbind(st[st$station_ID %in% pos.slope$station_ID,],pos.slope[,2:4])
st.pos
Data_in <- list(stations = st, sig.st = st.out, neg.st = st.neg, pos.st = st.pos)
background <- oz.map
p1 <- ggplot(subset(background, border=="coast"), aes(long, lat))
p1 <- p1 + geom_path()
p1 <- p1 + coord_equal()
p1 <- p1 + ggtitle("Australia")
#    p
#    p1 <- p +  geom_polygon(data=subset(oz.map,border="coast"), aes(fill=state))
p1 <- p1 + geom_point(data=Data_in$st[,data_type==dtype],
aes(x=lon,y=lat),colour="black",size=3)
p1 <- p1 + geom_point(data=Data_in$neg.st[,data_type==dtype],
aes(x=lon,y=lat),colour="red",size=4)
p1 <- p1 + geom_point(data=Data_in$pos.st[,data_type==dtype],
aes(x=lon,y=lat),colour="blue",size=4)
print(p1)
str(Data_in)
Data_in$pos.st
dtype <- max_temp
dtype <- "max_temp"
Data_in$pos.st[,data_type==d
type]
Data_in$pos.st[,data_type==dtype]
shiny::runApp()
p1 <- ggplot(subset(background, border=="coast"), aes(long, lat))
p1 <- p1 + geom_path()
p1 <- p1 + coord_equal()
p1 <- p1 + ggtitle("Australia")
#    p
#    p1 <- p +  geom_polygon(data=subset(oz.map,border="coast"), aes(fill=state))
p1 <- p1 + geom_point(data=Data_in$st[,"data_type"==dtype],
aes(x=lon,y=lat),colour="black",size=3)
p1 <- p1 + geom_point(data=Data_in$neg.st[,"data_type"==dtype],
aes(x=lon,y=lat),colour="red",size=4)
p1 <- p1 + geom_point(data=Data_in$pos.st[,"data_type"==dtype],
aes(x=lon,y=lat),colour="blue",size=4)
print(p1)
Data_in$pos.st[,"data_type"==dtype]
Data_in$pos.st
dtype
subset(Data_in$pos.st,Data_in$pos.st$data_type==dtype)
p1 <- ggplot(subset(background, border=="coast"), aes(long, lat))
p1 <- p1 + geom_path()
p1 <- p1 + coord_equal()
p1 <- p1 + ggtitle("Australia")
#    p
#    p1 <- p +  geom_polygon(data=subset(oz.map,border="coast"), aes(fill=state))
p1 <- p1 + geom_point(data=Data_in$st[,"data_type"==dtype],
aes(x=lon,y=lat),colour="black",size=3)
p1 <- p1 + geom_point(data=Data_in$neg.st[,"data_type"==dtype],
aes(x=lon,y=lat),colour="red",size=4)
p1 <- p1 + geom_point(data=subset(Data_in$pos.st,Data_in$pos.st$data_type==dtype),
aes(x=lon,y=lat),colour="blue",size=4)
print(p1)
subset(Data_in$st,data_type==dtype)
p1 <- p1 + geom_point(data=subset(Data_in$st,data_type==dtype),
aes(x=lon,y=lat),colour="black",size=3)
p1 <- p1 + geom_point(data=subset(Data_in$st,Data_in$st$data_type==dtype),
aes(x=lon,y=lat),colour="black",size=3)
p1 <- p1 + geom_point(data=subset(Data_in$neg.st,Data_in$neg.st$data_type==dtype),
aes(x=lon,y=lat),colour="red",size=4)
p1 <- p1 + geom_point(data=subset(Data_in$pos.st,Data_in$pos.st$data_type==dtype),
aes(x=lon,y=lat),colour="blue",size=4)
print(p1)
subset(Data_in$st,Data_in$st$data_type==dtype)
Data_in$st
subset(Data_in$neg.st,Data_in$neg.st$data_type==dtype)
p1 <- ggplot(subset(background, border=="coast"), aes(long, lat))
p1 <- p1 + geom_path()
p1 <- p1 + coord_equal()
p1 <- p1 + ggtitle("Australia")
#    p
#    p1 <- p +  geom_polygon(data=subset(oz.map,border="coast"), aes(fill=state))
p1 <- p1 + geom_point(data=Data_in$st,
aes(x=lon,y=lat),colour="black",size=3)
p1 <- p1 + geom_point(data=subset(Data_in$neg.st,Data_in$neg.st$data_type==dtype),
aes(x=lon,y=lat),colour="red",size=4)
p1 <- p1 + geom_point(data=subset(Data_in$pos.st,Data_in$pos.st$data_type==dtype),
aes(x=lon,y=lat),colour="blue",size=4)
print(p1)
shiny::runApp()
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_ID, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
test <- test[test$p_value_slope < 0.05,]
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
#    hist(dat$slope)
# close data base
odbcClose(db)
st
test <- test[test$p_value_slope < 0.05,]
st.out <- cbind(st[st$station_ID %in% test$station_ID,],test[,2:4])
neg.slope <- test[test$slope < 0,]
st.neg <- cbind(st[st$station_ID %in% neg.slope$station_ID,],neg.slope[,2:4])
pos.slope <- test[test$slope > 0,]
st.pos <- cbind(st[st$station_ID %in% pos.slope$station_ID,],pos.slope[,2:4])
st[st$station_ID %in% test$station_ID,]
test[,2:4]
test
test$station_ID
st$station_ID
st$station_ID %in% test$station_ID
st.all <- cbind(st,test)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_ID, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
#  test <- test[test$p_value_slope < 0.05,]
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
#    hist(dat$slope)
st.all <- cbind(st,test)
# close data base
odbcClose(db)
st.all
st.out <- st.all[st.all$p_value_slope < 0.05,]
st.out
shiny::runApp()
shiny::runApp()
shiny::runApp()
st,out
st.out
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_ID, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
#  test <- test[test$p_value_slope < 0.05,]
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
#    hist(dat$slope)
st.all <- cbind(st,test)
# close data base
odbcClose(db)
# select only significant slopes
st.out <- st.all[st.all$p_value_slope < 0.05,]
st.neg <- st.out[st.out$slope < 0,]
st.pos <- st.out[st.out$slope > 0,]
library(shiny)
library(RODBC)
library(oz)
# for fancier plotting
library(ggplot2)
oz.map <- read.csv("ozdata.csv")
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_ID, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
#  test <- test[test$p_value_slope < 0.05,]
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
#    hist(dat$slope)
st.all <- cbind(st,test)
# close data base
odbcClose(db)
# select only significant slopes
st.out <- st.all[st.all$p_value_slope < 0.05,]
st.neg <- st.out[st.out$slope < 0,]
st.pos <- st.out[st.out$slope > 0,]
st.out
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ggplot
shiny::runApp()
shiny::runApp()
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
test <- sqlQuery(db,paste("SELECT station_ID, slope, p_value_slope, data_type FROM regr_results"))
#    hist(dat$slope)
#  test <- test[test$p_value_slope < 0.05,]
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
#    hist(dat$slope)
st.all <- cbind(st,test)
# close data base
odbcClose(db)
# select only significant slopes
st.out <- st.all[st.all$p_value_slope < 0.05,]
st.neg <- st.out[st.out$slope < 0,]
st.pos <- st.out[st.out$slope > 0,]
str(stations)
head(st)
head(st.all)
st.all
shiny::runApp()
shiny::runApp()
shiny::runApp()
