main="Kakamega (Vihiga)", pch=21, col="red", bg="red",cex.main=0.8)
abline(Kaka.lm.ds)
plot(log(ds)~Year, data=ds.Kis,xlab="Year",
ylab="log transformed annual mean dryspell length",
main="Kisumu (Vihiga)", pch=21, col="red", bg="red",cex.main=0.8)
abline(Kis.lm.ds)
install.packages("devtools")
library(devtools)
install_github("pdsi", "znag/pdsi")
library(devtools)
install_github("pdsi", "znag/")
library(devtools)
install_github("pdsi", "znag")
?install_github
library(devtools)
install_github("pdsi", "znag" ref="pdsi")
library(devtools)
install_github("pdsi", "znag", ref="pdsi")
library(devtools)
install_github("pdsi", "znag/pdsi")
library(devtools)
install_github("pdsi", "")
library(devtools)
install_github("znag/pdsi", "znag")
library(devtools)
install_github("cszang/pdsi", "znag")
install.packages("bootRes")
library(devtools)
install_github("cszang/pdsi", "znag")
?pdsi
require(pdsi)
?pdsi
shiny::runApp()
install.packages("ROBDC")
install.packages("RODBC")
install.packages("RODBC")
library(RODBC)
line <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = input$type,
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = "testing")
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
try(sqlSave(db, line, tablename="main_table",
rownames=F,append=T,safer=F))
?sqlSave
line
str(line)
line <- data.frame(station_ID = as.character(as.numeric(input$choice)),
Lat = Lat,
Lon = Lon,
data_type = as.character(input$type),
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = as.character("testing"))
str(line)
as.character(as.numeric(input$choice))
character(input$choice)
as.character(input$choice)
station_ID = as.character(input$choice)
str(station_ID)
data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = as.character(input$type),
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = as.character("testing"))
line <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = as.character(input$type),
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = as.character("testing"))
is.character(line$station_ID)
as.character(line)
line <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = as.character(input$type),
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = as.character("testing"))
try(sqlSave(db, line,
rownames=F,append=T,safer=F))
try(sqlSave(db, line, table="main_table",
rownames=F,append=T,safer=F))
?odbcUpdate
try(sqlSave(db, line, table="main_table",
rownames=F,append=T,safer=T))
line
sqlSave(db, line, table="main_table",
rownames=F,append=T,safer=F)
str(line)
line <- data.frame(station_ID = character(1),
Lat = numeric(1),
Lon = numeric(1),
data_type = character(1),
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = character(1))
line$station_ID = as.character(input$choice)
line$Lat = Lat;  line$Lon = Lon
line$data_type = as.character(input$type)
line$comment = as.character("testing")
str(line)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlSave(db,line,tablename="main_table",
rownames=F,append=T)
line
main_table <- data.frame(station_ID = character(1),
Lat = numeric(1),
Lon = numeric(1),
data_type = character(1),
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = character(1))
main_table$station_ID = as.character(input$choice)
main_table$Lat = Lat;  line$Lon = Lon
main_table$data_type = as.character(input$type)
main_table$comment = as.character("testing")
# append database
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlSave(db,main_table,#tablename="main_table",
rownames=F,append=T)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlSave(db,main_table,#tablename="main_table",
rownames=F,append=T)
library(RODBC)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlSave(db,main_table,#tablename="main_table",
rownames=F,append=T)
sqlSave(db,main_table,#tablename="main_table",
rownames=F,append=T, safer=F)
odbcClose(db)
main_table <- data.frame(station_id = input$choice,
lat = Lat,
lon = Lon,
data_type = input$type,
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = "testing")
#
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
sqlSave(db,main_table,#tablename="main_table",
rownames=F,append=T, safer=F)
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
df_main
str(df_main)
df_main <- data.frame(station_id = input$choice,
lat = Lat,
lon = Lon,
data_type = input$type,
timestamp = Sys.time(),
start_date = dates$Startdate,
end_date = dates$Enddate,
comment = "testing")
sqlSave(db,df_main,tablename="main_table",
rownames=F,append=T, safer=F)
sqlDrop(db,"regr_stats")
sqlDrop(db,"regr_results")
sqlDrop(db,"main_table")
sqlSave(db,df_main,tablename="main_table",
rownames=F,append=T, safer=F)
sqlTables(db)
sqlQuery(db,"DESCRIBE main_table")
sqlQuery(db,"DESCRIBE main_table")
main_table <- data.frame(station_id = input$choice,
lat = Lat,
lon = Lon,
data_type = input$type,
timestamp = as.character(Sys.time()),
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing")
str(main_table)
main_table <- data.frame(station_id = as.character(input$choice),
lat = Lat,
lon = Lon,
data_type = input$type,
timestamp = as.character(Sys.time()),
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing")
str(main_table)
sqlSave(db,main_table,#tablename="main_table",
rownames=F,append=T, safer=F)
sqlQuery(db,"DESCRIBE main_table")
Sys.time()
as.character(Sys.time())
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=F)
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=F)
main_table <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = input$type,
timestamp = as.character(Sys.time()),
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing")
#
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=F)
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=T)
setwd("e:/willem/teaching/lwsci2/pracdata2010/scPDSI")
dir()
dir("run")
dir("monthly")
PDSI <- read.table("monthly/original/PDSI.clm", header=T)
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3])
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original")
PDSI[PDSI[,3]==-99.0,] <- NA
PDSI[PDSI[,3]==-99.0,3] <- NA
PDSI <- read.table("monthly/original/PDSI.clm", header=T)
# put back NA values
PDSI[PDSI[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original")
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-10,10))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-100,100))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-50,50))
Zindex <- read.table("monthly/original/ZIND.clm", header=T)
# put back NA values
Zindex[Zindex[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-50,50))
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-100,100))
setwd("e:/willem/teaching/lwsci2/pracdata2010/scPDSI")
# this is max T data
data.maxT <- read.table("data/2014_MaxT_Coota_Tbl.prn", header=T)
# minT
data.minT <- read.table("data/2014_MinT_Coota_Tbl.prn", header=T)
# Rain
data.Rain <- read.table("data/2014_Rain_Coota_Tbl.prn", header=T)
# get rid off the first two and the last column
data.Rain <- data.Rain[,-c(1,2,16)]
data.maxT <- data.maxT[,-c(1,2,16)]
data.minT <- data.minT[,-c(1,2,16)]
# Reduce data.Rain to 1912 and cutoff 2014
data.Rain <- data.Rain[data.Rain[,1]>1911,]
data.Rain <- data.Rain[data.Rain[,1]<2014,]
# calculate mean temperature rather than min and max
Temp <- (data.maxT[,2:13] + data.minT[,2:13])/2
for (i in 1:12) {
Temp[Temp[,i]<=-20,i] <- -99.00
}
dataT <- cbind(data.maxT[,1],Temp)
dataT <- dataT[dataT[,1]<2014,]
# Now write to the run directory
write.table(cbind(data.Rain[,1], format(round(data.Rain[2:13],2), nsmall=2)), file="run/monthly_P", row.names=F,col.names=F,quote=F)
write.table(cbind(dataT[,1], format(round(dataT[2:13],2), nsmall=2)), file="run/monthly_T", row.names=F, col.names=F, quote=F)
# Now also write the long term averages
for (i in 1:12) {
dataT[dataT[,i+1]==-99.00,i] <- NA
}
normalT <- apply(dataT[,2:13],2,mean,na.rm=T)
write.table(t(format(round(normalT,3),nsmall=3)),file="run/mon_T_normal",row.names=F,col.names=F,quote=F)
# create the parameter file
AWC = 330.00 # convert inches to mm
Lat = -35.0
write.table(paste(format(AWC,width=10,nsmall=5),format(Lat,width=10, nsmall=3)),file="run/parameter",row.names=F,col.names=F, quote=F)
# don't forget -m flag that sets it to metric
shell("sc-pdsi.exe -m -irun -f column")
PDSI <- read.table("monthly/original/PDSI.clm", header=T)
# put back NA values
PDSI[PDSI[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-50,50))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-10,10))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-15,5))
Zindex <- read.table("monthly/original/ZIND.clm", header=T)
# put back NA values
Zindex[Zindex[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-100,100))
Zindex <- read.table("monthly/original/ZIND.clm", header=T)
# put back NA values
Zindex[Zindex[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-20,10))
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-30,10))
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=T)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(-15,5), col="blue")
Zindex.sc <- read.table("monthly/self_cal/ZIND.clm", header=T)
# put back NA values
Zindex.sc[Zindex.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex.sc[,1],Zindex.sc[,2],"01",sep="-")),
Zindex.sc[,3], type="l",
xlab="Date", ylab="PDSI Z-index self calibrating", ylim=c(-30,10), col="blue")
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(-15,5), col="blue")
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F,nlines=1200)
?read.table
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F, nrows=1200)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(-15,5), col="blue")
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(0,5), col="blue")
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI", ylim=c(-15,8), col="blue")
lines(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")),
PDSI.sc[,3], col="red")
legend("topright",c("original","self calibrating"), col=c("blue","red"))
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI", ylim=c(-15,5), col="blue")
lines(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")),
PDSI.sc[,3], col="red")
legend("bottomleft",c("original","self calibrating"), col=c("blue","red"), lty=1)
PDSI <- read.table("monthly/original/PDSI.clm", header=F)
# put back NA values
PDSI[PDSI[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI original", ylim=c(-15,5), col="blue")
Zindex <- read.table("monthly/original/ZIND.clm", header=T)
# put back NA values
Zindex[Zindex[,3]==-99.0,3] <- NA
plot(as.Date(paste(Zindex[,1],Zindex[,2],"01",sep="-")), Zindex[,3], type="l",
xlab="Date", ylab="PDSI Z-index original", ylim=c(-30,10), col="blue")
```
PDSI.sc <- read.table("monthly/self_cal/PDSI.clm", header=F, nrows=1200)
# put back NA values
PDSI.sc[PDSI.sc[,3]==-99.0,3] <- NA
plot(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")), PDSI.sc[,3], type="l",
xlab="Date", ylab="PDSI self calibrating", ylim=c(0,5), col="blue")
plot(as.Date(paste(PDSI[,1],PDSI[,2],"01",sep="-")), PDSI[,3], type="l",
xlab="Date", ylab="PDSI", ylim=c(-15,5), col="blue")
lines(as.Date(paste(PDSI.sc[,1],PDSI.sc[,2],"01",sep="-")),
PDSI.sc[,3], col="red")
legend("bottomleft",c("original","self calibrating"), col=c("blue","red"), lty=1)
read.table("monthly/self_cal/PDSI.clm", header=F, nrows=1200)
install.packages("SPEI")
require(SPEI)
data(wichita)
names(wichita)
summary(wichita)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
library(shiny)
library(RODBC)
library(oz)
# for fancier plotting
library(ggplot2)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
df_main <- sqlQuery(db, "select * from main_table",as.is = c(1,2,6,7),
stringsAsFactors=F)
df_main
odbcClose(db)
main_table
str(main_table)
str(df_main)
main_table <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = input$type,
timestamp = as.character(Sys.time()),
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing",stringsAsFactors=F)
str(main_table)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=T)
odbcClose(db)
#    # coefficients and stats
odbcClose(db)
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL", case="nochange")
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T, safer=T)
sqlSave(db,main_table,#tablename="main_table",
rownames=T)
sqlSave(db,main_table,#tablename="main_table",
rownames=T,append=T)
test <- data.frame(station_ID = as.character(input$choice),
Lat = Lat,
Lon = Lon,
data_type = input$type,
timestamp = as.character(Sys.time()),
start_date = as.character(dates$Startdate),
end_date = as.character(dates$Enddate),
comment = "testing",stringsAsFactors=F)
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
odbcClose(db)
db <- odbcConnect("testwillem", uid="root", pwd="WsOL2010MySQL", case="nochange")
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
db <- odbcConnect("testwillem", uid="root", pwd="WsOL2010MySQL", case="nochange")
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
sqlSave(db,test,tablename="main_table",
rownames=T,append=T)
odbcClose(db)
shiny::runApp()
shiny::runApp()
odbcClose(db)
results <- data.frame(station_ID = as.character(input$choice),intercept = mod.res[1,1],
se_int = mod.res[1,2], p_value_int = mod.res[1,4],
slope = mod.res[2,1], se_slope = mod.res[2,2],
p_value_slope = mod.res[2,4], data_type=input$type,
comment="test", stringsAsFactors=F)
mod.res <-  summary(lm.mod)$coefficients
results <- data.frame(station_ID = as.character(input$choice),intercept = mod.res[1,1],
se_int = mod.res[1,2], p_value_int = mod.res[1,4],
slope = mod.res[2,1], se_slope = mod.res[2,2],
p_value_slope = mod.res[2,4], data_type=input$type,
comment="test", stringsAsFactors=F)
str(results)
try(sqlSave(db, results, tablename="regr_results",
rownames=FALSE, append=T))
db <- odbcConnect("testwillem", uid="root", pwd="WsOL2010MySQL", case="nochange")
try(sqlSave(db, results, tablename="regr_results",
rownames=FALSE, append=T))
shiny::runApp()
input$choice
input$type
data <- bomDailyObs(input$choice,observation=input$type))
data <- bomDailyObs(input$choice,observation=input$type)
data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ozmap
oz.map <- read.csv("ozdata.csv")
head(oz.map)
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
db <- odbcConnect("testwillem", uid="rver4657", pwd="7564revrMySQL")
st <- sqlQuery(db,paste("SELECT station_ID, lat, lon FROM main_table"))
st
shiny::runApp()
shiny::runApp()
oz.map <- read.csv("ozdata.csv")
head(oz.map)
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("ggmap")
require(ggmao)
require(ggmap)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sidebarLayout
?fluidPage
shiny::runApp()
?tabsetPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
